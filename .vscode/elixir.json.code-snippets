{

  "lv_mount": {
    "prefix": "mount",
    "body": [
      "@impl Phoenix.LiveView",
      "def mount(_params, _session, socket) do",

      "  {:ok, socket}",
      "end"
    ],
    "description": "Live mount function"
  },
  "lv_rend": {
    "prefix": "rend",
    "body": [
      "@impl Phoenix.LiveView",
      "def render(assigns) do",
      "  ~H\"\"\"",
      "  ${0}",
      "  \"\"\"",
      "end"
    ],
    "description": "Liveview render function"
  },
  "lv_handle_event": {
    "prefix": "he",
    "body": [
      "def handle_event(${1:event}, _, socket) do",
      "  socket = assign(socket, ${2:key}: ${3:value})",
      "  {:noreply, socket}",
      "end"
    ],
    "description": "LiveView handle_event function"
  },
  "lv_handle_info": {
    "prefix": "hi",
    "body": [
      "def handle_info(${1:message}, socket) do",
      "  socket = assign(socket, ${2:key}: ${3:value})",
      "  {:noreply, socket}",
      "end"
    ],
    "description": "LiveView handle_info function"
  },
  "lv_handle_params": {
    "prefix": "hp",
    "body": [
      "def handle_params(params, _url, socket) do",
      "  {:noreply, socket}",
      "end"
    ],
    "description": "LiveView handle_params function"
  },
  "lv_template": {
    "prefix": "lt",
    "body": ["~H\"\"\"", "${0}", "\"\"\""],
    "description": "LiveView inline template"
  },
  "pm": {
    "prefix": "pm",
    "body": ["%{\"${0}\" => ${0}}"],
    "description": "params map"
  },

  "eex_render_block": {
    "prefix": "et",
    "body": ["<%= $1 %>"],
    "description": "<%= %> render block"
  },
  "eex_end_tag": {
    "prefix": "eend",
    "body": ["<% end %>$1"],
    "description": "<% end %> end tag"
  },
  "for": {
    "prefix": "efor",
    "body": ["<%= for ${1:item} <- @$1s do %>", "  $2", "<% end %>"],
    "description": "EEx for"
  },
  "fori": {
    "prefix": "efori",
    "body": ["<%= for ${1:item} <- @$1s do %>", "  $2", "<% end %>"],
    "description": "EEx for comprehension with items"
  },
  "eex_ifa": {
    "prefix": "eifa",
    "body": ["<%= if $1, do: \"{$1}\" %>"],
    "description": "EEx if for attribute"
  },
  "eex_if": {
    "prefix": "eif",
    "body": ["<%= if $1 do %>", "  $2", "<% end %>"],
    "description": "EEx if"
  },
  "eex_if_else": {
    "prefix": "eife",
    "body": ["<%= if $1 do %>", "  $2", "<% else %>", "  $3", "<% end %>"],
    "description": "EEx if else"
  },
  "eex_else": {
    "prefix": "eelse",
    "body": ["<% else %>"],
    "description": "EEx else"
  },
  "eex_cond": {
    "prefix": "econd",
    "body": [
      "<%= cond do %>",
      "  <% $1 -> %>",
      "    $2",
      "  <% true -> %>",
      "    $3",
      "<% end %>"
    ],
    "description": "EEx cond"
  },
  "eex_unless": {
    "prefix": "eunless",
    "body": ["<%= unless $1 do %>", "  $2", "<% end %>"],
    "description": "EEx  unless"
  }

    "lv_module": {
      "prefix": "lv",
      "body": [
        "defmodule ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web.${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} do",
        "  use ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web, :live_view",
        "  $0",
        "end"
      ],
      "description": "LiveView module"
    },
    "lc_module": {
      "prefix": "lc",
      "body": [
        "defmodule ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web.${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} do",
        "  use ${WORKSPACE_NAME/(.*)/${1:/pascalcase}/g}Web, :live_component",
        "  $0",
        "end"
      ],
      "description": "LiveComponent module"
    },
    "lv_mount": {
      "prefix": "mount",
      "body": [
        "def mount(_params, _session, socket) do",
        "  socket =",
        "    assign(socket,",
        "      ${1:key}: ${2:value}",
        "    )",
        "",
        "  {:ok, socket}",
        "end"
      ],
      "description": "LiveView mount function"
    },
    "lv_render": {
      "prefix": "rend",
      "body": [
        "def render(assigns) do",
        "  ~H\"\"\"",
        "  ${0}",
        "  \"\"\"",
        "end"
      ],
      "description": "LiveView render function"
    },
    "lv_function_component": {
      "prefix": "fc",
      "body": [
        "def ${1:name}(assigns) do",
        "  ~H\"\"\"",
        "  ${2}",
        "  \"\"\"",
        "end"
      ],
      "description": "LiveView function component"
    },
    "lv_handle_event": {
      "prefix": "he",
      "body": [
        "def handle_event(${1:event}, _, socket) do",
        "  {:noreply, socket}",
        "end"
      ],
      "description": "LiveView handle_event function"
    },
    "lv_handle_event1": {
      "prefix": "he1",
      "body": [
        "def handle_event(${1:event}, _, socket) do",
        "  socket = assign(socket, ${2:key}: ${3:value})",
        "  {:noreply, socket}",
        "end"
      ],
      "description": "LiveView handle_event function"
    },
    "lv_handle_event2": {
      "prefix": "he2",
      "body": [
        "def handle_event(${1:event}, _, socket) do",
        "  socket =",
        "    assign(socket,",
        "      ${2:key}: ${3:value}",
        "    )",
        "",
        "  {:noreply, socket}",
        "end"
      ],
      "description": "LiveView handle_event function"
    },
    "lv_handle_info": {
      "prefix": "hi",
      "body": [
        "def handle_info(${1:message}, socket) do",
        "  {:noreply, socket}",
        "end"
      ],
      "description": "LiveView handle_info function"
    },
    "lv_handle_info1": {
      "prefix": "hi1",
      "body": [
        "def handle_info(${1:message}, socket) do",
        "  socket = assign(socket, ${2:key}: ${3:value})",
        "  {:noreply, socket}",
        "end"
      ],
      "description": "LiveView handle_info function"
    },
    "lv_handle_info2": {
      "prefix": "hi2",
      "body": [
        "def handle_info(${1:message}, socket) do",
        "  socket =",
        "    assign(socket,",
        "      ${2:key}: ${3:value}",
        "    )",
        "",
        "  {:noreply, socket}",
        "end"
      ],
      "description": "LiveView handle_info function"
    },
    "lv_handle_params": {
      "prefix": "hp",
      "body": [
        "def handle_params(${1:params}, _uri, socket) do",
        "  {:noreply, socket}",
        "end"
      ],
      "description": "LiveView handle_params function"
    },
          "lv_heex": {
                  "prefix": "h",
                  "body": ["~H\"\"\"", "${0}", "\"\"\""],
      "description": "LiveView HEEx template"
    },
    "lv_assign": {
      "prefix": "assign",
      "body": ["socket =", "  assign(socket,", "    ${1:key}: ${2:value}", "  )"],
      "description": "LiveView assign"
    },
    "insp": {
      "prefix": "insp",
      "body": "IO.inspect(self(), label: \"${0:label}\")",
      "description": "Inspect process with a label"
    },
    "map": {
      "prefix": "m",
      "body": "%{\"${1}\" => ${2}}",


}
